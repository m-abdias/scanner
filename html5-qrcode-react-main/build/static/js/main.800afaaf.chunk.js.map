{"version":3,"sources":["Html5QrcodePlugin.jsx","ResultContainerPlugin.jsx","App.jsx","reportWebVitals.js","index.js"],"names":["qrcodeRegionId","Html5QrcodePlugin","props","useEffect","config","fps","qrbox","aspectRatio","undefined","disableFlip","createConfig","verbose","qrCodeSuccessCallback","html5QrcodeScanner","Html5QrcodeScanner","render","qrCodeErrorCallback","clear","catch","error","console","id","ResultContainerPlugin","useState","data","IMEI1","IMEI2","SERIAL_NUMBER","NAME","TYPE","message","dbConsult","setDbConsult","imeiSerial","baseURL","process","results","axios","get","headers","then","response","Object","keys","length","log","responseMessage","err","statusCode","consultDB","className","class","role","App","decodedResults","setDecodedResults","decodedResult","prev","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.800afaaf.chunk.js","sourcesContent":["import { Html5QrcodeScanner } from 'html5-qrcode';\nimport { useEffect } from 'react';\n\nconst qrcodeRegionId = \"html5qr-code-full-region\";\n\n// Creates the configuration object for Html5QrcodeScanner.\nconst createConfig = (props) => {\n    let config = {};\n    if (props.fps) {\n        config.fps = props.fps;\n    }\n    if (props.qrbox) {\n        config.qrbox = props.qrbox;\n    }\n    if (props.aspectRatio) {\n        config.aspectRatio = props.aspectRatio;\n    }\n    if (props.disableFlip !== undefined) {\n        config.disableFlip = props.disableFlip;\n    }\n    return config;\n};\n\nconst Html5QrcodePlugin = (props) => {\n\n    useEffect(() => {\n        // when component mounts\n        const config = createConfig(props);\n        const verbose = props.verbose === true;\n        // Suceess callback is required.\n        if (!(props.qrCodeSuccessCallback)) {\n            throw \"qrCodeSuccessCallback is required callback.\";\n        }\n        const html5QrcodeScanner = new Html5QrcodeScanner(qrcodeRegionId, config, verbose);\n        html5QrcodeScanner.render(props.qrCodeSuccessCallback, props.qrCodeErrorCallback);\n\n        // cleanup function when component will unmount\n        return () => {\n            html5QrcodeScanner.clear().catch(error => {\n                console.error(\"Failed to clear html5QrcodeScanner. \", error);\n            });\n        };\n    }, []);\n\n    return (\n        <div id={qrcodeRegionId} />\n    );\n};\n\nexport default Html5QrcodePlugin;\n","import React, { useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\n\r\nfunction ResultContainerPlugin(props) {\r\n  const [dbConsult, setDbConsult] = useState({\r\n    data: {\r\n      IMEI1: \"\",\r\n      IMEI2: \"\",\r\n      SERIAL_NUMBER: \"\",\r\n      NAME: \"\",\r\n      TYPE: \"\",\r\n    },\r\n    message: \"\",\r\n  });\r\n\r\n  function consultDB(imeiSerial) {\r\n    const baseURL =\r\n      process.env.REACT_APP_BASE_ENDPOINT_CHECKMI +\r\n      \"/product/fromsite/\" +\r\n      imeiSerial.results[0];\r\n\r\n    axios\r\n      .get(baseURL, {\r\n        headers: {\r\n          \"API-KEY\": process.env.REACT_APP_API_TOKEN,\r\n        },\r\n      })\r\n      .then((response) => {\r\n        if (\r\n          imeiSerial.results[0] !== undefined &&\r\n          response.data !== null &&\r\n          response.data !== undefined &&\r\n          Object.keys(response.data).length > 0\r\n        ) {\r\n          console.log(imeiSerial.results[0])\r\n          setDbConsult(response.data);\r\n        } else {\r\n          this.responseMessage(\r\n            \"Erro no retorno da\" + \"requisição. Tente novamente\"\r\n          );\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n        switch (err.response.data.statusCode) {\r\n          case 401:\r\n            console.log(\" ___________________________ \");\r\n            console.log(\"|      NÃO AUTORIZADO.      |\");\r\n            console.log(\"|      TENTE NOVAMENTE      |\");\r\n            console.log(\"|---------------------------|\");\r\n            console.log(\"|     STATUS_ERROR: 401     |\");\r\n            console.log(\"|      ConsultIMEI.tsx      |\");\r\n            console.log(\" ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾ \");\r\n            this.responseMessage(\"Não autorizado.\" + \"Tente novamente.\");\r\n            break;\r\n          case 429:\r\n            console.log(\" ___________________________ \");\r\n            console.log(\"|  EXCESSO DE REQUISIÇÕES,  |\");\r\n            console.log(\"|  AGUARDE PARA CONTINUAR.  |\");\r\n            console.log(\"|---------------------------|\");\r\n            console.log(\"|     STATUS_ERROR: 429     |\");\r\n            console.log(\"|      ConsultIMEI.tsx      |\");\r\n            console.log(\" ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾ \");\r\n            this.responseMessage(\r\n              \"Excesso de requisições,\" + \" aguarde para continuar.\"\r\n            );\r\n            break;\r\n          case 500:\r\n            console.log(\" ___________________________ \");\r\n            console.log(\"|   SERVIDOR INDISPONÍVEL   |\");\r\n            console.log(\"|     OU EM MANUTENÇÃO.     |\");\r\n            console.log(\"|---------------------------|\");\r\n            console.log(\"|     STATUS_ERROR: 429     |\");\r\n            console.log(\"|      ConsultIMEI.tsx      |\");\r\n            console.log(\" ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾ \");\r\n            this.responseMessage(\"Servidor indisponível\" + \"ou em manutenção.\");\r\n            break;\r\n        }\r\n      });\r\n  }\r\n\r\n  useEffect(() => {\r\n    consultDB(props);\r\n  }, []);\r\n\r\n  if (dbConsult[\"data\"][\"SERIAL_NUMBER\"] === \"\") {\r\n    return null;\r\n  }\r\n\r\n    return (\r\n      <div>\r\n        {dbConsult[\"data\"][\"SERIAL_NUMBER\"] > \"\" ? (\r\n          <div className=\"Barcoder-Result\">\r\n            {dbConsult[\"data\"][\"SERIAL_NUMBER\"] === undefined ||\r\n            dbConsult[\"data\"][\"SERIAL_NUMBER\"] === \"\" ||\r\n            dbConsult[\"data\"][\"SERIAL_NUMBER\"] === null ? (\r\n              <div></div>\r\n            ) : (\r\n              <div>\r\n                <h1>Serial: {dbConsult[\"data\"][\"SERIAL_NUMBER\"]}</h1>\r\n                <div class=\"alert alert-success\" role=\"alert\">\r\n                  {dbConsult[\"message\"]}\r\n                  <br />\r\n                  {dbConsult[\"data\"][\"NAME\"]}\r\n                </div>\r\n              </div>\r\n            )}\r\n          </div>\r\n        ) : (\r\n          <div className=\"Barcoder-Result\">\r\n            <h1>Serial: {props.results[0]}</h1>\r\n            <div class=\"alert alert-danger\" role=\"alert\">\r\n              {dbConsult[\"message\"]}\r\n            </div>\r\n          </div>\r\n        )}\r\n      </div>\r\n    );\r\n\r\n}\r\n\r\nexport default ResultContainerPlugin;\r\n","// @ts-check\n\nimport React, { useState } from 'react';\nimport './App.css';\nimport Html5QrcodePlugin from './Html5QrcodePlugin.jsx';\nimport ResultContainerPlugin from './ResultContainerPlugin.jsx';\n\nconst App = (props) => {\n    const [decodedResults, setDecodedResults] = useState([]);\n    const onNewScanResult = (decodedResult) => {\n        // @ts-ignore\n        setDecodedResults(prev => [decodedResult]);\n    };\n\n    return (\n        <div className=\"App\">\n            <section className=\"App-section\">\n                <Html5QrcodePlugin\n                    fps={10}\n                    qrbox={250}\n                    disableFlip={false}\n                    qrCodeSuccessCallback={onNewScanResult}\n                />\n                <ResultContainerPlugin results={decodedResults} />\n            </section>\n        </div>\n    );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}