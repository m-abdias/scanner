{"version":3,"sources":["Html5QrcodePlugin.jsx","ResultContainerPlugin.jsx","App.jsx","reportWebVitals.js","index.js"],"names":["qrcodeRegionId","Html5QrcodePlugin","props","useEffect","config","fps","qrbox","aspectRatio","undefined","disableFlip","createConfig","verbose","qrCodeSuccessCallback","html5QrcodeScanner","Html5QrcodeScanner","render","qrCodeErrorCallback","clear","catch","error","console","id","ResultContainer","results","data","class","role","ResultContainerPlugin","filteredResults","i","length","decodedText","push","filterResults","className","App","useState","decodedResults","setDecodedResults","decodedResult","prev","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"yPAGMA,EAAiB,2BA8CRC,EA1BW,SAACC,GAqBvB,OAnBAC,qBAAU,WAEN,IAAMC,EArBO,SAACF,GAClB,IAAIE,EAAS,GAab,OAZIF,EAAMG,MACND,EAAOC,IAAMH,EAAMG,KAEnBH,EAAMI,QACNF,EAAOE,MAAQJ,EAAMI,OAErBJ,EAAMK,cACNH,EAAOG,YAAcL,EAAMK,kBAELC,IAAtBN,EAAMO,cACNL,EAAOK,YAAcP,EAAMO,aAExBL,EAOYM,CAAaR,GACtBS,GAA4B,IAAlBT,EAAMS,QAEtB,IAAMT,EAAMU,sBACR,KAAM,8CAEV,IAAMC,EAAqB,IAAIC,IAAmBd,EAAgBI,EAAQO,GAI1E,OAHAE,EAAmBE,OAAOb,EAAMU,sBAAuBV,EAAMc,qBAGtD,WACHH,EAAmBI,QAAQC,OAAM,SAAAC,GAC7BC,QAAQD,MAAM,uCAAwCA,SAG/D,IAGC,qBAAKE,GAAIrB,KC5BjB,IAAMsB,EAAkB,SAACC,GACvB,OACE,mCAE6Bf,IAApBe,EAAQC,KAAK,GACZ,wBAEsB,iBAApBD,EAAQC,KAAK,GACf,qBAAKC,MAAM,sBAAsBC,KAAK,QAAtC,6CAIA,qBAAKD,MAAM,qBAAqBC,KAAK,QAArC,uDAoBCC,EAXe,SAACzB,GAC7B,IAAMqB,EArCR,SAAuBA,GAErB,IADA,IAAIK,EAAkB,GACbC,EAAI,EAAGA,EAAIN,EAAQO,SAAUD,EAC1B,IAANA,EAKAN,EAAQM,GAAGE,cAAgBR,EAAQM,EAAI,GAAGE,aAC5CH,EAAgBI,KAAKT,EAAQM,IAL7BD,EAAgBI,KAAKT,EAAQM,IAQjC,OAAOD,EAyBSK,CAAc/B,EAAMqB,SACpC,OACE,qBAAKW,UAAU,mBAAf,SACE,qBAAKA,UAAU,iBAAf,SACE,cAAC,EAAD,CAAiBV,KAAMD,SCdhBY,EAtBH,SAACjC,GACT,MAA4CkC,mBAAS,IAArD,mBAAOC,EAAP,KAAuBC,EAAvB,KAMA,OACI,qBAAKJ,UAAU,MAAf,SACI,0BAASA,UAAU,cAAnB,UACI,cAAC,EAAD,CACI7B,IAAK,GACLC,MAAO,IACPG,aAAa,EACbG,sBAZQ,SAAC2B,GAErBD,GAAkB,SAAAE,GAAI,MAAI,CAACD,SAYnB,cAAC,EAAD,CAAuBhB,QAASc,UCXjCI,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASnC,OACP,cAAC,IAAMoC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.a467cfc4.chunk.js","sourcesContent":["import { Html5QrcodeScanner } from 'html5-qrcode';\nimport { useEffect } from 'react';\n\nconst qrcodeRegionId = \"html5qr-code-full-region\";\n\n// Creates the configuration object for Html5QrcodeScanner.\nconst createConfig = (props) => {\n    let config = {};\n    if (props.fps) {\n        config.fps = props.fps;\n    }\n    if (props.qrbox) {\n        config.qrbox = props.qrbox;\n    }\n    if (props.aspectRatio) {\n        config.aspectRatio = props.aspectRatio;\n    }\n    if (props.disableFlip !== undefined) {\n        config.disableFlip = props.disableFlip;\n    }\n    return config;\n};\n\nconst Html5QrcodePlugin = (props) => {\n\n    useEffect(() => {\n        // when component mounts\n        const config = createConfig(props);\n        const verbose = props.verbose === true;\n        // Suceess callback is required.\n        if (!(props.qrCodeSuccessCallback)) {\n            throw \"qrCodeSuccessCallback is required callback.\";\n        }\n        const html5QrcodeScanner = new Html5QrcodeScanner(qrcodeRegionId, config, verbose);\n        html5QrcodeScanner.render(props.qrCodeSuccessCallback, props.qrCodeErrorCallback);\n\n        // cleanup function when component will unmount\n        return () => {\n            html5QrcodeScanner.clear().catch(error => {\n                console.error(\"Failed to clear html5QrcodeScanner. \", error);\n            });\n        };\n    }, []);\n\n    return (\n        <div id={qrcodeRegionId} />\n    );\n};\n\nexport default Html5QrcodePlugin;\n","import React from \"react\";\n\nfunction filterResults(results) {\n  let filteredResults = [];\n  for (var i = 0; i < results.length; ++i) {\n    if (i === 0) {\n      filteredResults.push(results[i]);\n      continue;\n    }\n\n    if (results[i].decodedText !== results[i - 1].decodedText) {\n      filteredResults.push(results[i]);\n    }\n  }\n  return filteredResults;\n}\n\nconst ResultContainer = (results) => {\n  return (\n    <div>\n\n            {results.data[0] === undefined ? (\n              <div >\n              </div>\n            ) : results.data[0] === \"ABC-abc-1234\" ? (\n              <div class=\"alert alert-success\" role=\"alert\">\n                Produto comercializado pela DL.\n              </div>\n            ) : (\n              <div class=\"alert alert-danger\" role=\"alert\">\n                Produto n√£o comercializado pela DL.\n              </div>\n            )}\n          \n    </div>\n  );\n};\n\nconst ResultContainerPlugin = (props) => {\n  const results = filterResults(props.results);\n  return (\n    <div className=\"Result-container\">\n      <div className=\"Result-section\">\n        <ResultContainer data={results} />\n      </div>\n    </div>\n  );\n};\n\nexport default ResultContainerPlugin;\n","// @ts-check\n\nimport React, { useState } from 'react';\nimport './App.css';\nimport Html5QrcodePlugin from './Html5QrcodePlugin.jsx';\nimport ResultContainerPlugin from './ResultContainerPlugin.jsx';\n\nconst App = (props) => {\n    const [decodedResults, setDecodedResults] = useState([]);\n    const onNewScanResult = (decodedResult) => {\n        // @ts-ignore\n        setDecodedResults(prev => [decodedResult]);\n    };\n\n    return (\n        <div className=\"App\">\n            <section className=\"App-section\">\n                <Html5QrcodePlugin\n                    fps={10}\n                    qrbox={250}\n                    disableFlip={false}\n                    qrCodeSuccessCallback={onNewScanResult}\n                />\n                <ResultContainerPlugin results={decodedResults} />\n            </section>\n        </div>\n    );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}