export class Html5QrcodeStrings {
    static codeParseError(exception) {
        return `Erro de análise de código QR = ${exception}`;
    }
    static errorGettingUserMedia(error) {
        return `Erro ao obter userMedia = ${error}`;
    }
    static onlyDeviceSupportedError() {
        return "O dispositivo não suporta navigator.mediaDevices , apenas "
        + "câmeraIdOrConfig compatível neste caso é o parâmetro deviceId ";
    }
    static cameraStreamingNotSupported() {
        return "Streaming de câmera não suportado pelo navegador.";
    }
    static unableToQuerySupportedDevices() {
        return "Não foi possível consultar os dispositivos suportados, erro desconhecido.";
    }
    static insecureContextCameraQueryError() {
        return "O acesso à câmera só é suportado em contexto seguro como https "
        + "ou localhost.";
    }
}
export class Html5QrcodeScannerStrings {
    static scanningStatus() {
        return "Digitalizando";
    }
    static idleStatus() {
        return "Parado";
    }
    static errorStatus() {
        return "Erro";
    }
    static permissionStatus() {
        return "Permissão";
    }
    static noCameraFoundErrorStatus() {
        return "Sem câmera";
    }
    static lastMatch(decodedText) {
        return `Última correspondência: ${decodedText}`;
    }
    static codeScannerTitle() {
        return "Scanner de Código";
    }
    static cameraPermissionTitle() {
        return "Solicitar Permissões de Câmera";
    }
    static cameraPermissionRequesting() {
        return "Solicitando permissões de câmera...";
    }
    static noCameraFound() {
        return "Nenhuma câmera encontrada";
    }
    static scanButtonStopScanningText() {
        return "Parar digitalização";
    }
    static scanButtonStartScanningText() {
        return "Iniciar digitalização";
    }
    static scanButtonScanningStarting() {
        return "Iniciando Câmera...";
    }
    static textIfCameraScanSelected() {
        return "Digitalizar um arquivo de imagem";
    }
    static textIfFileScanSelected() {
        return "Digitalizar usando a câmera";
    }
    static selectCamera() {
        return "Selecionar câmera";
    }
}
export class LibraryInfoStrings {
    static builtUsing() {
        return "Construído";
    }
    static reportIssues() {
        return "Relatar problemas";
    }
}
//# sourceMappingURL=strings.js.map